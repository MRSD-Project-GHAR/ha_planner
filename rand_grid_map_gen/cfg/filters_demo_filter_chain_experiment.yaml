grid_map_filters:
  - name: first
    type: gridMapFilters/MockFilter
    params:
      processing_time: 100
      print_name: true
  - name: buffer_normalizer
    type: gridMapFilters/BufferNormalizerFilter

  - name: surface_normals_original
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation
      output_layers_prefix: normal_vectors_
      radius: 0.2
      normal_vector_positive_axis: z
      parallelization_enabled: true

  - name: original_slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: original_slope
      expression: acos(normal_vectors_z)

  - name: elevation_threshold_A
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: elevation_threshold_A
      expression: ((step(elevation - 0.2) + 2) .* (-step(original_slope - 20*(3.14/180)) + 2)) - 1

  - name: elevation_threshold_B
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: elevation_threshold_B
      expression: ((step(elevation - 0.02) + 2) .* (-step(original_slope - 15*(3.14/180)) + 2)) - 1

  - name: elevation_threshold_A_clamped
    type: gridMapFilters/ThresholdFilter
    params:
      condition_layer: elevation_threshold_A
      output_layer: elevation_threshold_A
      upper_threshold: 0.1 # alternative: upper_threshold
      set_to: 1.0 # # Other uses: .nan, .inf

  - name: elevation_threshold_B_clamped
    type: gridMapFilters/ThresholdFilter
    params:
      condition_layer: elevation_threshold_B
      output_layer: elevation_threshold_B
      upper_threshold: 0.1 # alternative: upper_threshold
      set_to: 1.0 # # Other uses: .nan, .inf

  - name: final_elevation_A
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: elevation_A
      expression: elevation_threshold_A .* elevation

  - name: final_elevation_B
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: elevation_B
      expression: elevation_threshold_B .* elevation

  - name: slope_factor_A
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope_factor_A
      # Expression would be: (step(elevation - FSOH) + 1) .* (Slope_cost_factor * slope + max_cost * (step(slope - MTS) + 1))
      expression: (step(elevation) .* (step(elevation - 0.2))) + 1

  - name: slope_factor_B
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope_factor_B
      # Expression would be: (step(elevation - FSOH) + 1) .* (Slope_cost_factor * slope + max_cost * (step(slope - MTS) + 1))
      expression: (step(elevation) .* (step(elevation - 0.02))) + 1

  - name: slope_factor_A_clamped
    type: gridMapFilters/ThresholdFilter
    params:
      condition_layer: slope_factor_A
      output_layer: slope_factor_A
      upper_threshold: 0.1 # alternative: upper_threshold
      set_to: 1.0 # # Other uses: .nan, .inf

  - name: slope_factor_B_clamped
    type: gridMapFilters/ThresholdFilter
    params:
      condition_layer: slope_factor_B
      output_layer: slope_factor_B
      upper_threshold: 0.1 # alternative: upper_threshold
      set_to: 1.0 # # Other uses: .nan, .inf

  - name: surface_normals_A
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation_A
      output_layers_prefix: A_normal_vectors_
      radius: 0.2
      normal_vector_positive_axis: z
      parallelization_enabled: true

  - name: surface_normals_B
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation_B
      output_layers_prefix: B_normal_vectors_
      radius: 0.2
      normal_vector_positive_axis: z
      parallelization_enabled: true

  # Compute slope from surface normal.
  - name: slope_A
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope_A
      expression: acos(A_normal_vectors_z)

  - name: slope_B
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope_B
      expression: acos(B_normal_vectors_z)

  # Compute traversability as normalized weighted sum of slope and roughness.
  - name: traversability_A
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability_A
      # Expression would be: (step(elevation - FSOH) + 1) .* (Slope_cost_factor * slope + max_cost * (step(slope - MTS) + 1))
      expression: (slope_factor_A .* (1.0*slope_A + 10000*(step(slope_A - 20*(3.14/180)) + 1)))

  # Compute traversability as normalized weighted sum of slope and roughness.
  - name: traversability_B
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability_B
      # Expression would be: (step(elevation - FSOH) + 1) .* (Slope_cost_factor * slope + max_cost * (step(slope - MTS) + 1))
      expression: (slope_factor_B .* (1.0*slope_B + 10000*(step(slope_B - 15*(3.14/180)) + 1)))

